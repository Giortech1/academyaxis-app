---
name: Deploy AcademyAxis to Production

on:
  push:
    branches:
      - main
  workflow_dispatch: 

jobs:
  load-config:
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ steps.load-config.outputs.project_id }}
      project_number: ${{ steps.load-config.outputs.project_number }}
      region: ${{ steps.load-config.outputs.region }}
      service_name: ${{ steps.load-config.outputs.service_name }}
      memory: ${{ steps.load-config.outputs.memory }}
      cpu: ${{ steps.load-config.outputs.cpu }}
      min_instances: ${{ steps.load-config.outputs.min_instances }}
      max_instances: ${{ steps.load-config.outputs.max_instances }}

    steps:
      - name: Checkout application code
        uses: actions/checkout@v4
        with:
          path: app

      - name: Checkout org infrastructure
        uses: actions/checkout@v4
        with:
          repository: Giortech1/org-infrastructure
          path: infrastructure
          token: ${{ secrets.PATH_TOKEN }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Load configuration
        id: load-config
        run: |
          APP="academyaxis"
          ENV="prod"

          CONFIG_FILE="infrastructure/.github/config/project-config.yml"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          # Extract values from config file using yq
          PROJECT_ID=$(yq e ".$APP.$ENV.project_id" $CONFIG_FILE)
          PROJECT_NUMBER=$(yq e ".$APP.$ENV.project_number" $CONFIG_FILE)
          SERVICE_NAME=$(yq e ".$APP.$ENV.service_name" $CONFIG_FILE)
          REGION=$(yq e ".$APP.$ENV.region" $CONFIG_FILE)
          MEMORY=$(yq e ".$APP.$ENV.memory" $CONFIG_FILE)
          CPU=$(yq e ".$APP.$ENV.cpu" $CONFIG_FILE)
          MIN_INSTANCES=$(yq e ".$APP.$ENV.min_instances" $CONFIG_FILE)
          MAX_INSTANCES=$(yq e ".$APP.$ENV.max_instances" $CONFIG_FILE)

          # Set outputs
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "project_number=$PROJECT_NUMBER" >> $GITHUB_OUTPUT
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT
          echo "cpu=$CPU" >> $GITHUB_OUTPUT
          echo "min_instances=$MIN_INSTANCES" >> $GITHUB_OUTPUT
          echo "max_instances=$MAX_INSTANCES" >> $GITHUB_OUTPUT

          # Debug output
          echo "Using configuration for AcademyAxis in $ENV environment:"
          echo "  Project ID: $PROJECT_ID"
          echo "  Project Number: $PROJECT_NUMBER"
          echo "  Service Name: $SERVICE_NAME"
          echo "  Region: $REGION"
          echo "  Resources: $CPU CPU, $MEMORY Memory"
          echo "  Scaling: $MIN_INSTANCES-$MAX_INSTANCES instances"

  deploy:
    needs: load-config
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout application code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: >-
            projects/${{ needs.load-config.outputs.project_number }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: >-
            github-actions-sa@${{ needs.load-config.outputs.project_id }}.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.load-config.outputs.project_id }}

      - name: Configure Docker
        run: gcloud auth configure-docker -q

      - name: Build and Push Docker image
        run: |
          IMAGE_NAME="gcr.io/${{ needs.load-config.outputs.project_id }}/${{ needs.load-config.outputs.service_name }}:${{ github.sha }}"
          
          echo "üèóÔ∏è Building AcademyAxis Production Docker image: $IMAGE_NAME"
          docker build -t "$IMAGE_NAME" .
          
          echo "üöÄ Pushing AcademyAxis Production image to registry"
          docker push "$IMAGE_NAME"
          
          echo "‚úÖ AcademyAxis Production image ready for deployment"

      - name: Deploy to Cloud Run
        run: |
          echo "üéì Deploying AcademyAxis to PRODUCTION environment"
          echo "üö® This is a PRODUCTION deployment - extra care required!"
          
          gcloud run deploy ${{ needs.load-config.outputs.service_name }} \
            --image gcr.io/${{ needs.load-config.outputs.project_id }}/${{ needs.load-config.outputs.service_name }}:${{ github.sha }} \
            --platform managed \
            --region ${{ needs.load-config.outputs.region }} \
            --memory ${{ needs.load-config.outputs.memory }} \
            --cpu ${{ needs.load-config.outputs.cpu }} \
            --max-instances ${{ needs.load-config.outputs.max_instances }} \
            --min-instances ${{ needs.load-config.outputs.min_instances }} \
            --concurrency 100 \
            --timeout 300s \
            --set-env-vars="ENVIRONMENT=prod,JWT_SECRET=prod-academyaxis-secret-very-secure-change-this" \
            --no-allow-unauthenticated \
            --quiet

      - name: Configure Production Access
        run: |
          echo "üîí Configuring production access controls"
          
          # Add IAM policy for service account access (more secure for production)
          gcloud run services add-iam-policy-binding ${{ needs.load-config.outputs.service_name }} \
            --region=${{ needs.load-config.outputs.region }} \
            --member="serviceAccount:github-actions-sa@${{ needs.load-config.outputs.project_id }}.iam.gserviceaccount.com" \
            --role="roles/run.invoker" \
            --quiet || echo "‚ö†Ô∏è Could not configure IAM policy"

      - name: Verify Production Deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ needs.load-config.outputs.service_name }} \
            --platform managed \
            --region ${{ needs.load-config.outputs.region }} \
            --format 'value(status.url)')
          
          echo "üåê AcademyAxis PRODUCTION deployed at: $SERVICE_URL"
          
          # Wait longer for production to be ready
          echo "‚è≥ Waiting for production service to be ready..."
          sleep 30
          
          # Test service health with service account authentication
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $(gcloud auth print-access-token)" \
            "$SERVICE_URL/health" || echo "FAILED")
          
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "‚úÖ AcademyAxis PRODUCTION is healthy and operational!"
            echo "üéì Educational platform is LIVE for students worldwide!"
            echo ""
            echo "üöÄ PRODUCTION ENDPOINTS:"
            echo "  - Main Platform: $SERVICE_URL"
            echo "  - Health Check: $SERVICE_URL/health"
            echo "  - Course Catalog: $SERVICE_URL/api/courses"
            echo ""
            echo "üîí SECURITY NOTES:"
            echo "  - Production requires authentication"
            echo "  - JWT secret is configured"
            echo "  - Rate limiting is active"
            echo "  - Enhanced security headers enabled"
            echo ""
            echo "üìä MONITORING:"
            echo "  - Check Cloud Run metrics"
            echo "  - Monitor error rates"
            echo "  - Track user registrations"
            echo "  - Watch cost budgets"
            echo ""
            echo "üéâ AcademyAxis is ready to educate the world!"
          elif [[ "$HTTP_STATUS" == "403" ]]; then
            echo "‚úÖ Production deployed but access is restricted (403) - this is expected"
            echo "üîí Security is working - only authenticated requests allowed"
          else
            echo "‚ö†Ô∏è Production health check returned: $HTTP_STATUS"
            echo "üîç Check the service logs for any issues"
          fi
          
          echo "üìã AcademyAxis PRODUCTION deployment completed successfully!"
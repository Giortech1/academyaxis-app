---
name: Deploy AcademyAxis Multi-Tenant Platform

on:
  push:
    branches:
      - prod
      - uat          
      - develop       
  pull_request:
    branches:
      - prod
      
  workflow_dispatch:
    inputs:
      deployment_region:
        description: 'Choose deployment region'
        required: true
        default: 'africa'
        type: choice
        options:
        - africa
        - cameroon   # Add Cameroon-specific option
        
      target_project:
        description: 'Choose project type'
        required: true
        default: 'existing'
        type: choice
        options:
        - existing     # Use existing academyaxis projects
        - cameroon237  # Use academyaxis237 projects

env:
  PLATFORM_NAME: "academyaxis"
  DOCKER_BUILDKIT: 1

jobs:
  # Simplified config loading using real projects
  load-config:
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ steps.load-config.outputs.project_id }}
      project_number: ${{ steps.load-config.outputs.project_number }}
      service_name: ${{ steps.load-config.outputs.service_name }}
      region: ${{ steps.load-config.outputs.region }}
      memory: ${{ steps.load-config.outputs.memory }}
      cpu: ${{ steps.load-config.outputs.cpu }}
      min_instances: ${{ steps.load-config.outputs.min_instances }}
      max_instances: ${{ steps.load-config.outputs.max_instances }}
      display_name: ${{ steps.load-config.outputs.display_name }}
      app_type: ${{ steps.determine-app.outputs.app_type }}

    steps:
      - name: Checkout application code
        uses: actions/checkout@v4
        with:
          path: app

      - name: Checkout org infrastructure
        uses: actions/checkout@v4
        with:
          repository: Giortech1/org-infrastructure
          path: infrastructure
          token: ${{ secrets.PATH_TOKEN }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Determine environment
        id: determine-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "üöÄ Production deployment triggered"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "üîß Development deployment triggered"
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "üîß Default to development environment"
          fi

      - name: Determine app type
        id: determine-app
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET="${{ github.event.inputs.target_project }}"
          else
            TARGET="existing"  # Default to existing projects
          fi
          
          if [[ "$TARGET" == "cameroon237" ]]; then
            echo "app_type=academyaxis237" >> $GITHUB_OUTPUT
            echo "üá®üá≤ Using Cameroon-specific projects (academyaxis237)"
          else
            echo "app_type=academyaxis" >> $GITHUB_OUTPUT
            echo "üåç Using existing projects (academyaxis)"
          fi

      - name: Load configuration from existing projects
        id: load-config
        run: |
          ENV="${{ steps.determine-env.outputs.environment }}"
          APP_TYPE="${{ steps.determine-app.outputs.app_type }}"
          
          # Use existing project-config.yml (known to work)
          CONFIG_FILE="infrastructure/.github/config/project-config.yml"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          echo "üìã Loading configuration for $APP_TYPE environment $ENV"

          # Extract values from your existing config
          if [[ "$APP_TYPE" == "academyaxis237" ]]; then
            # Use Cameroon-specific projects
            PROJECT_ID=$(yq e ".academyaxis237.$ENV.project_id" $CONFIG_FILE)
            PROJECT_NUMBER=$(yq e ".academyaxis237.$ENV.project_number" $CONFIG_FILE)
            SERVICE_NAME=$(yq e ".academyaxis237.$ENV.service_name" $CONFIG_FILE)
            REGION=$(yq e ".academyaxis237.$ENV.region" $CONFIG_FILE)
            MEMORY=$(yq e ".academyaxis237.$ENV.memory" $CONFIG_FILE)
            CPU=$(yq e ".academyaxis237.$ENV.cpu" $CONFIG_FILE)
            MIN_INSTANCES=$(yq e ".academyaxis237.$ENV.min_instances" $CONFIG_FILE)
            MAX_INSTANCES=$(yq e ".academyaxis237.$ENV.max_instances" $CONFIG_FILE)
            DISPLAY_NAME="üá®üá≤ AcademyAxis Cameroon $ENV"
          else
            # Use existing academyaxis projects
            PROJECT_ID=$(yq e ".academyaxis.$ENV.project_id" $CONFIG_FILE)
            PROJECT_NUMBER=$(yq e ".academyaxis.$ENV.project_number" $CONFIG_FILE)
            SERVICE_NAME=$(yq e ".academyaxis.$ENV.service_name" $CONFIG_FILE)
            REGION=$(yq e ".academyaxis.$ENV.region" $CONFIG_FILE)
            MEMORY=$(yq e ".academyaxis.$ENV.memory" $CONFIG_FILE)
            CPU=$(yq e ".academyaxis.$ENV.cpu" $CONFIG_FILE)
            MIN_INSTANCES=$(yq e ".academyaxis.$ENV.min_instances" $CONFIG_FILE)
            MAX_INSTANCES=$(yq e ".academyaxis.$ENV.max_instances" $CONFIG_FILE)
            DISPLAY_NAME="üéì AcademyAxis $ENV"
          fi

          # Set outputs
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "project_number=$PROJECT_NUMBER" >> $GITHUB_OUTPUT
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT
          echo "cpu=$CPU" >> $GITHUB_OUTPUT
          echo "min_instances=$MIN_INSTANCES" >> $GITHUB_OUTPUT
          echo "max_instances=$MAX_INSTANCES" >> $GITHUB_OUTPUT
          echo "display_name=$DISPLAY_NAME" >> $GITHUB_OUTPUT

          # Debug output
          echo "üìã Configuration loaded for $DISPLAY_NAME:"
          echo "  Project ID: $PROJECT_ID"
          echo "  Project Number: $PROJECT_NUMBER"
          echo "  Service Name: $SERVICE_NAME"
          echo "  Region: $REGION"
          echo "  Resources: $CPU CPU, $MEMORY Memory"
          echo "  Scaling: $MIN_INSTANCES-$MAX_INSTANCES instances"

  # Single deployment job (no matrix complexity)
  deploy:
    needs: load-config
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout application code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: >-
            projects/${{ needs.load-config.outputs.project_number }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: >-
            github-actions-sa@${{ needs.load-config.outputs.project_id }}.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ needs.load-config.outputs.project_id }}

      - name: Verify Authentication
        run: |
          echo "üîê Verifying authentication for ${{ needs.load-config.outputs.display_name }}"
          gcloud auth list
          gcloud config list project
          echo "‚úÖ Authentication successful"

      - name: Enable Required APIs
        run: |
          echo "üîß Enabling APIs for ${{ needs.load-config.outputs.display_name }}..."
          gcloud services enable \
            cloudbuild.googleapis.com \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            firestore.googleapis.com \
            secretmanager.googleapis.com \
            --project=${{ needs.load-config.outputs.project_id }}

      - name: Create Artifact Registry Repository
        run: |
          echo "üì¶ Setting up Artifact Registry repository..."
          
          if [[ "${{ needs.load-config.outputs.app_type }}" == "academyaxis237" ]]; then
            REPO_NAME="academyaxis-cameroon"
            DESCRIPTION="Docker images for AcademyAxis Cameroon deployment"
          else
            REPO_NAME="academyaxis-multi-tenant"
            DESCRIPTION="Docker images for AcademyAxis multi-tenant deployment"
          fi
          
          # Check if repository exists
          if ! gcloud artifacts repositories describe $REPO_NAME \
            --location=${{ needs.load-config.outputs.region }} \
            --project=${{ needs.load-config.outputs.project_id }} >/dev/null 2>&1; then
            
            echo "Creating Artifact Registry repository: $REPO_NAME"
            gcloud artifacts repositories create $REPO_NAME \
              --repository-format=docker \
              --location=${{ needs.load-config.outputs.region }} \
              --description="$DESCRIPTION" \
              --project=${{ needs.load-config.outputs.project_id }}
          else
            echo "Repository $REPO_NAME already exists"
          fi

      - name: Configure Docker for Artifact Registry
        run: |
          echo "üê≥ Configuring Docker for Artifact Registry..."
          gcloud auth configure-docker ${{ needs.load-config.outputs.region }}-docker.pkg.dev -q

      - name: Build and Push Docker Image
        run: |
          if [[ "${{ needs.load-config.outputs.app_type }}" == "academyaxis237" ]]; then
            REPO_NAME="academyaxis-cameroon"
            BUILD_ARGS="--build-arg REGION=cameroon --build-arg ENVIRONMENT=prod --build-arg CAMEROON_FEATURES=true --build-arg SUPPORTED_LANGUAGES=fr-CM,en-CM --build-arg DEFAULT_CURRENCY=XAF"
            echo "üá®üá≤ Building AcademyAxis for Cameroon"
          else
            REPO_NAME="academyaxis-multi-tenant"
            BUILD_ARGS="--build-arg REGION=africa --build-arg ENVIRONMENT=prod --build-arg MULTI_TENANT=true"
            echo "üåç Building AcademyAxis multi-tenant"
          fi
          
          IMAGE_NAME="${{ needs.load-config.outputs.region }}-docker.pkg.dev/${{ needs.load-config.outputs.project_id }}/$REPO_NAME/academyaxis:${{ github.sha }}"
          
          echo "üèóÔ∏è Building Docker image: $IMAGE_NAME"
          
          # Use regular Dockerfile if multi-tenant doesn't exist
          if [ -f "Dockerfile.multi-tenant" ]; then
            DOCKERFILE="Dockerfile.multi-tenant"
          else
            DOCKERFILE="Dockerfile"
            echo "üìù Using regular Dockerfile (multi-tenant Dockerfile not found)"
          fi
          
          docker build $BUILD_ARGS -f $DOCKERFILE -t "$IMAGE_NAME" .
          
          echo "üöÄ Pushing image to registry"
          docker push "$IMAGE_NAME"
          
          echo "‚úÖ Image ready for deployment: $IMAGE_NAME"

      - name: Deploy to Cloud Run
        run: |
          if [[ "${{ needs.load-config.outputs.app_type }}" == "academyaxis237" ]]; then
            REPO_NAME="academyaxis-cameroon"
            ENV_VARS="ENVIRONMENT=prod,REGION=cameroon,CAMEROON_FEATURES=true,SUPPORTED_LANGUAGES=fr-CM,en-CM,DEFAULT_CURRENCY=XAF,TIMEZONE=Africa/Douala,COUNTRY_CODE=CM,PHONE_PREFIX=+237"
            echo "üá®üá≤ Deploying AcademyAxis Cameroon"
          else
            REPO_NAME="academyaxis-multi-tenant"
            ENV_VARS="ENVIRONMENT=prod,REGION=africa,MULTI_TENANT=true,FEATURE_CROSS_SCHOOL_PARENTS=true,FEATURE_SCHOOL_ISOLATION=true"
            echo "üåç Deploying AcademyAxis multi-tenant"
          fi
          
          IMAGE_NAME="${{ needs.load-config.outputs.region }}-docker.pkg.dev/${{ needs.load-config.outputs.project_id }}/$REPO_NAME/academyaxis:${{ github.sha }}"
          
          echo "üöÄ Deploying ${{ needs.load-config.outputs.display_name }}"
          
          gcloud run deploy ${{ needs.load-config.outputs.service_name }} \
            --image="$IMAGE_NAME" \
            --platform=managed \
            --region=${{ needs.load-config.outputs.region }} \
            --memory=${{ needs.load-config.outputs.memory }} \
            --cpu=${{ needs.load-config.outputs.cpu }} \
            --max-instances=${{ needs.load-config.outputs.max_instances }} \
            --min-instances=${{ needs.load-config.outputs.min_instances }} \
            --concurrency=100 \
            --timeout=300s \
            --set-env-vars="$ENV_VARS" \
            --allow-unauthenticated \
            --quiet

      - name: Verify Deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ needs.load-config.outputs.service_name }} \
            --platform=managed \
            --region=${{ needs.load-config.outputs.region }} \
            --format='value(status.url)')
          
          echo "üåê ${{ needs.load-config.outputs.display_name }} deployed at: $SERVICE_URL"
          echo "‚è≥ Waiting for service to be ready..."
          sleep 30
          
          # Test service health
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health" || echo "FAILED")
          
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "‚úÖ ${{ needs.load-config.outputs.display_name }} is healthy and operational!"
            
            if [[ "${{ needs.load-config.outputs.app_type }}" == "academyaxis237" ]]; then
              echo ""
              echo "üá®üá≤ CAMEROON-SPECIFIC FEATURES ACTIVE:"
              echo "  ‚úÖ Bilingual interface (French/English)"
              echo "  ‚úÖ XAF currency support"
              echo "  ‚úÖ Cameroon timezone (Africa/Douala)"
              echo "  ‚úÖ +237 phone number support"
              echo "  ‚úÖ Ready for Orange Money & MTN MoMo"
              echo "  ‚úÖ 20-point grading system"
              echo "  ‚úÖ Multi-tenant school isolation"
              echo "  ‚úÖ Cross-school parent functionality"
              echo ""
              echo "üè´ READY FOR CAMEROON SCHOOLS!"
            else
              echo ""
              echo "üåç MULTI-TENANT FEATURES ACTIVE:"
              echo "  ‚úÖ Cross-school parent functionality"
              echo "  ‚úÖ School data isolation"
              echo "  ‚úÖ Regional compliance"
              echo "  ‚úÖ Scalable architecture"
            fi
            
            echo ""
            echo "üöÄ ENDPOINTS:"
            echo "  - Main Platform: $SERVICE_URL"
            echo "  - Health Check: $SERVICE_URL/health"
            echo "  - School Onboarding: $SERVICE_URL/api/schools/onboard"
            echo "  - Parent Portal: $SERVICE_URL/parent"
            echo "  - Cross-School Parents: $SERVICE_URL/parent/multi-school"
            echo "  - Admin Dashboard: $SERVICE_URL/admin"
            
          elif [[ "$HTTP_STATUS" == "404" ]]; then
            echo "‚ö†Ô∏è Health endpoint not found (404) - service deployed but health check not implemented"
            echo "‚úÖ Main service should still be accessible at: $SERVICE_URL"
          else
            echo "‚ö†Ô∏è Health check returned: $HTTP_STATUS"
            echo "üîç Check the service logs for any issues"
            echo "üìã Service URL: $SERVICE_URL"
          fi
          
          echo ""
          echo "üìã Deployment Summary:"
          echo "  Project: ${{ needs.load-config.outputs.project_id }}"
          echo "  Service: ${{ needs.load-config.outputs.service_name }}"
          echo "  Region: ${{ needs.load-config.outputs.region }}"
          echo "  Image: $IMAGE_NAME"
          echo "  URL: $SERVICE_URL"
          echo ""
          echo "üéâ ${{ needs.load-config.outputs.display_name }} deployment completed!"

      - name: Post-Deployment Actions
        run: |
          echo "üìä MONITORING SETUP:"
          echo "- Check Cloud Run metrics in Console"
          echo "- Set up alerting for errors and latency"
          echo "- Monitor resource usage and costs"
          echo ""
          echo "üéØ NEXT STEPS:"
          if [[ "${{ needs.load-config.outputs.app_type }}" == "academyaxis237" ]]; then
            echo "1. üá®üá≤ Start onboarding Cameroon pilot schools"
            echo "2. üß™ Test bilingual interface (French/English)"
            echo "3. üí∞ Set up Orange Money and MTN MoMo integration"
            echo "4. üì± Test SMS notifications for low-connectivity areas"
            echo "5. üè´ Configure 20-point grading system"
          else
            echo "1. üè´ Test school isolation and multi-tenancy"
            echo "2. üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Test cross-school parent functionality"
            echo "3. üåç Prepare for global expansion"
            echo "4. üìà Monitor platform performance"
          fi
          echo ""
          echo "‚úÖ AcademyAxis is ready to transform education!"
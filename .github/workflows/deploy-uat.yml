name: Deploy AcademyAxis to UAT

on:
  push:
    branches:
      - uat
  workflow_dispatch:

jobs:
  load-config:
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ steps.load-config.outputs.project_id }}
      project_number: ${{ steps.load-config.outputs.project_number }}
      region: ${{ steps.load-config.outputs.region }}
      service_name: ${{ steps.load-config.outputs.service_name }}
      memory: ${{ steps.load-config.outputs.memory }}
      cpu: ${{ steps.load-config.outputs.cpu }}
      min_instances: ${{ steps.load-config.outputs.min_instances }}
      max_instances: ${{ steps.load-config.outputs.max_instances }}
      
    steps:
      - name: Checkout application code
        uses: actions/checkout@v4
        with:
          path: app

      - name: Checkout org infrastructure
        uses: actions/checkout@v4
        with:
          repository: Giortech1/org-infrastructure
          ref: main
          path: infrastructure
          token: ${{ secrets.PATH_TOKEN }}
      
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      
      - name: Load configuration
        id: load-config
        run: |
          APP="academyaxis"
          ENV="uat"
          
          CONFIG_FILE="infrastructure/.github/config/project-config.yml"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Configuration file not found: $CONFIG_FILE"
            exit 1
          fi
          
          # Extract values from config file using yq
          PROJECT_ID=$(yq e ".$APP.$ENV.project_id" $CONFIG_FILE)
          PROJECT_NUMBER=$(yq e ".$APP.$ENV.project_number" $CONFIG_FILE)
          SERVICE_NAME=$(yq e ".$APP.$ENV.service_name" $CONFIG_FILE)
          REGION=$(yq e ".$APP.$ENV.region" $CONFIG_FILE)
          MEMORY=$(yq e ".$APP.$ENV.memory" $CONFIG_FILE)
          CPU=$(yq e ".$APP.$ENV.cpu" $CONFIG_FILE)
          MIN_INSTANCES=$(yq e ".$APP.$ENV.min_instances" $CONFIG_FILE)
          MAX_INSTANCES=$(yq e ".$APP.$ENV.max_instances" $CONFIG_FILE)
          
          # Set outputs
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "project_number=$PROJECT_NUMBER" >> $GITHUB_OUTPUT
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT
          echo "cpu=$CPU" >> $GITHUB_OUTPUT
          echo "min_instances=$MIN_INSTANCES" >> $GITHUB_OUTPUT
          echo "max_instances=$MAX_INSTANCES" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Using configuration for AcademyAxis in $ENV environment:"
          echo "  Project ID: $PROJECT_ID"
          echo "  Project Number: $PROJECT_NUMBER"
          echo "  Service Name: $SERVICE_NAME"
          echo "  Region: $REGION"
          echo "  Resources: $CPU CPU, $MEMORY Memory"
          echo "  Scaling: $MIN_INSTANCES-$MAX_INSTANCES instances"

  deploy:
    needs: load-config
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout application code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ needs.load-config.outputs.project_number }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions-sa@${{ needs.load-config.outputs.project_id }}.iam.gserviceaccount.com
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.load-config.outputs.project_id }}
      
      - name: Enable Required APIs
        run: |
          echo "üîß Enabling required APIs..."
          gcloud services enable \
            cloudbuild.googleapis.com \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            --project=${{ needs.load-config.outputs.project_id }}

      - name: Create Artifact Registry Repository
        run: |
          echo "üì¶ Setting up Artifact Registry repository..."
          REPO_NAME="academyaxis-uat"
          
          # Check if repository exists
          if ! gcloud artifacts repositories describe $REPO_NAME \
            --location=${{ needs.load-config.outputs.region }} \
            --project=${{ needs.load-config.outputs.project_id }} >/dev/null 2>&1; then
            
            echo "Creating Artifact Registry repository: $REPO_NAME"
            gcloud artifacts repositories create $REPO_NAME \
              --repository-format=docker \
              --location=${{ needs.load-config.outputs.region }} \
              --project=${{ needs.load-config.outputs.project_id }}
          else
            echo "Repository $REPO_NAME already exists"
          fi

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ needs.load-config.outputs.region }}-docker.pkg.dev -q
      
      - name: Build and Push Docker image
        run: |
          IMAGE_NAME="${{ needs.load-config.outputs.region }}-docker.pkg.dev/${{ needs.load-config.outputs.project_id }}/academyaxis-uat/academyaxis-uat:${{ github.sha }}"
          
          echo "üéì Building AcademyAxis UAT Docker image: $IMAGE_NAME"
          docker build -t "$IMAGE_NAME" .
          
          echo "üöÄ Pushing AcademyAxis UAT image to registry"
          docker push "$IMAGE_NAME"
          
          echo "‚úÖ AcademyAxis UAT image ready for deployment"
      
      - name: Deploy to Cloud Run
        run: |
          echo "üéì Deploying AcademyAxis to UAT environment"
          
          gcloud run deploy ${{ needs.load-config.outputs.service_name }} \
            --image ${{ needs.load-config.outputs.region }}-docker.pkg.dev/${{ needs.load-config.outputs.project_id }}/academyaxis-uat/academyaxis-uat:${{ github.sha }} \
            --platform managed \
            --region ${{ needs.load-config.outputs.region }} \
            --allow-unauthenticated \
            --memory ${{ needs.load-config.outputs.memory }} \
            --cpu ${{ needs.load-config.outputs.cpu }} \
            --max-instances ${{ needs.load-config.outputs.max_instances }} \
            --min-instances ${{ needs.load-config.outputs.min_instances }} \
            --concurrency 80 \
            --timeout 300s \
            --set-env-vars="ENVIRONMENT=uat,JWT_SECRET=uat-academyaxis-secret-change-in-production" \
            --quiet

      - name: Verify UAT deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ needs.load-config.outputs.service_name }} \
            --platform managed \
            --region ${{ needs.load-config.outputs.region }} \
            --format 'value(status.url)')
          
          echo "üåê AcademyAxis UAT deployed at: $SERVICE_URL"
          
          sleep 15
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health" || echo "FAILED")
          
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "‚úÖ AcademyAxis UAT is healthy and ready for testing!"
            echo "üß™ UAT testing environment is live"
            echo "üìö Test the educational platform functionality"
            echo "üë• Verify user registration and course access"
          else
            echo "‚ö†Ô∏è UAT health check returned: $HTTP_STATUS"
          fi
          
          echo "üìã AcademyAxis UAT deployment completed"
---
name: Deploy AcademyAxis to Dev

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  load-config:
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ steps.load-config.outputs.project_id }}
      project_number: ${{ steps.load-config.outputs.project_number }}
      region: ${{ steps.load-config.outputs.region }}
      service_name: ${{ steps.load-config.outputs.service_name }}
      memory: ${{ steps.load-config.outputs.memory }}
      cpu: ${{ steps.load-config.outputs.cpu }}
      min_instances: ${{ steps.load-config.outputs.min_instances }}
      max_instances: ${{ steps.load-config.outputs.max_instances }}

    steps:
      - name: Checkout application code
        uses: actions/checkout@v4
        with:
          path: app

      - name: Checkout org infrastructure
        uses: actions/checkout@v4
        with:
          repository: Giortech1/org-infrastructure
          path: infrastructure
          token: ${{ secrets.PATH_TOKEN }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Load configuration
        id: load-config
        run: |
          APP="academyaxis"
          ENV="dev"

          CONFIG_FILE="infrastructure/.github/config/project-config.yml"
          
          echo "🔍 Checking configuration file..."
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Configuration file not found: $CONFIG_FILE"
            echo "Available files in infrastructure/.github/:"
            find infrastructure/.github/ -name "*.yml" -o -name "*.yaml" 2>/dev/null || echo "No yml files found"
            exit 1
          fi

          echo "📋 Configuration file contents:"
          cat "$CONFIG_FILE"

          # Verify the structure exists
          if ! yq e ".$APP" "$CONFIG_FILE" >/dev/null 2>&1; then
            echo "❌ Application '$APP' not found in config"
            echo "Available applications:"
            yq e 'keys' "$CONFIG_FILE"
            exit 1
          fi

          if ! yq e ".$APP.$ENV" "$CONFIG_FILE" >/dev/null 2>&1; then
            echo "❌ Environment '$ENV' not found for application '$APP'"
            echo "Available environments for $APP:"
            yq e ".$APP | keys" "$CONFIG_FILE"
            exit 1
          fi

          # Extract values from config file using yq
          PROJECT_ID=$(yq e ".$APP.$ENV.project_id" "$CONFIG_FILE")
          PROJECT_NUMBER=$(yq e ".$APP.$ENV.project_number" "$CONFIG_FILE")
          SERVICE_NAME=$(yq e ".$APP.$ENV.service_name" "$CONFIG_FILE")
          REGION=$(yq e ".$APP.$ENV.region" "$CONFIG_FILE")
          MEMORY=$(yq e ".$APP.$ENV.memory" "$CONFIG_FILE")
          CPU=$(yq e ".$APP.$ENV.cpu" "$CONFIG_FILE")
          MIN_INSTANCES=$(yq e ".$APP.$ENV.min_instances" "$CONFIG_FILE")
          MAX_INSTANCES=$(yq e ".$APP.$ENV.max_instances" "$CONFIG_FILE")

          # Validate required values
          if [[ "$PROJECT_ID" == "null" || -z "$PROJECT_ID" ]]; then
            echo "❌ Project ID not found for $APP in $ENV environment"
            echo "Config for $APP.$ENV:"
            yq e ".$APP.$ENV" "$CONFIG_FILE"
            exit 1
          fi

          # Set outputs
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "project_number=$PROJECT_NUMBER" >> $GITHUB_OUTPUT
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT
          echo "cpu=$CPU" >> $GITHUB_OUTPUT
          echo "min_instances=$MIN_INSTANCES" >> $GITHUB_OUTPUT
          echo "max_instances=$MAX_INSTANCES" >> $GITHUB_OUTPUT

          # Debug output
          echo "✅ Configuration loaded successfully for AcademyAxis in $ENV environment:"
          echo "  Project ID: $PROJECT_ID"
          echo "  Project Number: $PROJECT_NUMBER"
          echo "  Service Name: $SERVICE_NAME"
          echo "  Region: $REGION"
          echo "  Resources: $CPU CPU, $MEMORY Memory"
          echo "  Scaling: $MIN_INSTANCES-$MAX_INSTANCES instances"

  deploy:
    needs: load-config
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout application code
        uses: actions/checkout@v4

      - name: Verify configuration values
        run: |
          echo "🔍 Verifying configuration from previous job..."
          echo "Project ID: ${{ needs.load-config.outputs.project_id }}"
          echo "Project Number: ${{ needs.load-config.outputs.project_number }}"
          echo "Service Name: ${{ needs.load-config.outputs.service_name }}"
          echo "Region: ${{ needs.load-config.outputs.region }}"
          
          if [[ -z "${{ needs.load-config.outputs.project_id }}" ]]; then
            echo "❌ Project ID is empty - configuration loading failed"
            exit 1
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: >-
            projects/${{ needs.load-config.outputs.project_number }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: >-
            github-actions-sa@${{ needs.load-config.outputs.project_id }}.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.load-config.outputs.project_id }}

      - name: Verify GCP Authentication
        run: |
          echo "🔍 Verifying GCP authentication..."
          echo "Current project: $(gcloud config get-value project)"
          echo "Current account: $(gcloud config get-value account)"
          
          # Test project access
          if gcloud projects describe ${{ needs.load-config.outputs.project_id }} >/dev/null 2>&1; then
            echo "✅ Project access verified"
          else
            echo "❌ Cannot access project ${{ needs.load-config.outputs.project_id }}"
            echo "Please verify:"
            echo "1. Workload Identity is configured correctly"
            echo "2. Service account has necessary permissions"
            echo "3. Project exists and is active"
            exit 1
          fi

      - name: Enable Required APIs
        run: |
          echo "🔧 Enabling required APIs..."
          gcloud services enable \
            cloudbuild.googleapis.com \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            --project=${{ needs.load-config.outputs.project_id }}

      - name: Create Artifact Registry Repository
        run: |
          echo "📦 Setting up Artifact Registry repository..."
          REPO_NAME="academyaxis-dev"
          
          # Check if repository exists
          if ! gcloud artifacts repositories describe $REPO_NAME \
            --location=${{ needs.load-config.outputs.region }} \
            --project=${{ needs.load-config.outputs.project_id }} >/dev/null 2>&1; then
            
            echo "Creating Artifact Registry repository: $REPO_NAME"
            gcloud artifacts repositories create $REPO_NAME \
              --repository-format=docker \
              --location=${{ needs.load-config.outputs.region }} \
              --project=${{ needs.load-config.outputs.project_id }}
          else
            echo "Repository $REPO_NAME already exists"
          fi

      - name: Configure Docker for Artifact Registry
        run: |
          echo "🐳 Configuring Docker for Artifact Registry..."
          gcloud auth configure-docker ${{ needs.load-config.outputs.region }}-docker.pkg.dev -q
          echo "✅ Docker configured for Artifact Registry"

      - name: Verify application files
        run: |
          echo "📁 AcademyAxis application files:"
          ls -la
          echo ""
          
          if [ -f "package.json" ]; then
            echo "📦 Found Node.js application"
            echo "Package.json name: $(cat package.json | grep '"name"' | head -1)"
          else
            echo "❌ package.json not found"
            exit 1
          fi
          
          if [ -f "server.js" ]; then
            echo "🎓 Found AcademyAxis server.js"
          else
            echo "❌ server.js not found"
            exit 1
          fi

          if [ -f "Dockerfile" ]; then
            echo "🐳 Found Dockerfile"
          else
            echo "❌ Dockerfile not found"
            exit 1
          fi

      - name: Build and Push Docker image
        run: |
          # Use Artifact Registry format
          IMAGE_NAME="${{ needs.load-config.outputs.region }}-docker.pkg.dev/${{ needs.load-config.outputs.project_id }}/academyaxis-dev/academyaxis-dev:${{ github.sha }}"
          
          echo "🏗️ Building AcademyAxis Docker image: $IMAGE_NAME"
          docker build -t "$IMAGE_NAME" .
          
          echo "🚀 Pushing AcademyAxis Docker image to Artifact Registry"
          docker push "$IMAGE_NAME"
          
          echo "✅ AcademyAxis image build and push completed"

      - name: Deploy to Cloud Run
        run: |
          echo "🎓 Deploying AcademyAxis ${{ needs.load-config.outputs.service_name }} to Cloud Run"
          
          gcloud run deploy ${{ needs.load-config.outputs.service_name }} \
            --image ${{ needs.load-config.outputs.region }}-docker.pkg.dev/${{ needs.load-config.outputs.project_id }}/academyaxis-dev/academyaxis-dev:${{ github.sha }} \
            --platform managed \
            --region ${{ needs.load-config.outputs.region }} \
            --allow-unauthenticated \
            --memory ${{ needs.load-config.outputs.memory }} \
            --cpu ${{ needs.load-config.outputs.cpu }} \
            --max-instances ${{ needs.load-config.outputs.max_instances }} \
            --min-instances ${{ needs.load-config.outputs.min_instances }} \
            --concurrency 80 \
            --timeout 300s \
            --set-env-vars="ENVIRONMENT=dev,JWT_SECRET=dev-academyaxis-secret-change-in-production" \
            --quiet

      - name: Post-deployment verification
        run: |
          # Get the service URL
          SERVICE_URL=$(gcloud run services describe ${{ needs.load-config.outputs.service_name }} \
            --platform managed \
            --region ${{ needs.load-config.outputs.region }} \
            --format 'value(status.url)')
          
          echo "🌐 AcademyAxis service deployed at: $SERVICE_URL"
          
          # Wait a moment for service to be ready
          sleep 15
          
          # Test the service health endpoint
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health" || echo "FAILED")
          
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "✅ AcademyAxis service is responding successfully (HTTP $HTTP_STATUS)"
            echo "🎓 Educational platform is live and ready for learning!"
            echo ""
            echo "📚 Available endpoints:"
            echo "  - Main Platform: $SERVICE_URL"
            echo "  - Health Check: $SERVICE_URL/health"
            echo "  - API Info: $SERVICE_URL/api/info"
            echo "  - Courses API: $SERVICE_URL/api/courses"
            echo "  - Auth API: $SERVICE_URL/api/auth/register"
            echo ""
            echo "🚀 AcademyAxis is ready for student enrollment!"
          else
            echo "⚠️ AcademyAxis service returned HTTP status: $HTTP_STATUS"
            echo "Check the Cloud Run logs for deployment issues"
          fi
          
          echo "📋 AcademyAxis deployment completed for development environment"
---
name: Deploy AcademyAxis to Dev

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  load-config:
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ steps.load-config.outputs.project_id }}
      project_number: ${{ steps.load-config.outputs.project_number }}
      region: ${{ steps.load-config.outputs.region }}
      service_name: ${{ steps.load-config.outputs.service_name }}
      memory: ${{ steps.load-config.outputs.memory }}
      cpu: ${{ steps.load-config.outputs.cpu }}
      min_instances: ${{ steps.load-config.outputs.min_instances }}
      max_instances: ${{ steps.load-config.outputs.max_instances }}

    steps:
      - name: Checkout application code
        uses: actions/checkout@v4
        with:
          path: app

      - name: Checkout org infrastructure
        uses: actions/checkout@v4
        with:
          repository: Giortech1/org-infrastructure
          path: infrastructure
          token: ${{ secrets.PATH_TOKEN }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Load configuration
        id: load-config
        run: |
          APP="academyaxis"
          ENV="dev"

          CONFIG_FILE="infrastructure/.github/config/project-config.yml"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          # Extract values from config file using yq
          PROJECT_ID=$(yq e ".$APP.$ENV.project_id" $CONFIG_FILE)
          PROJECT_NUMBER=$(yq e ".$APP.$ENV.project_number" $CONFIG_FILE)
          SERVICE_NAME=$(yq e ".$APP.$ENV.service_name" $CONFIG_FILE)
          REGION=$(yq e ".$APP.$ENV.region" $CONFIG_FILE)
          MEMORY=$(yq e ".$APP.$ENV.memory" $CONFIG_FILE)
          CPU=$(yq e ".$APP.$ENV.cpu" $CONFIG_FILE)
          MIN_INSTANCES=$(yq e ".$APP.$ENV.min_instances" $CONFIG_FILE)
          MAX_INSTANCES=$(yq e ".$APP.$ENV.max_instances" $CONFIG_FILE)

          # Validate required values
          if [[ "$PROJECT_ID" == "null" || -z "$PROJECT_ID" ]]; then
            echo "::error::Project ID not found for $APP in $ENV environment"
            exit 1
          fi

          # Set outputs
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "project_number=$PROJECT_NUMBER" >> $GITHUB_OUTPUT
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT
          echo "cpu=$CPU" >> $GITHUB_OUTPUT
          echo "min_instances=$MIN_INSTANCES" >> $GITHUB_OUTPUT
          echo "max_instances=$MAX_INSTANCES" >> $GITHUB_OUTPUT

          # Debug output
          echo "‚úÖ Configuration loaded for AcademyAxis in $ENV environment:"
          echo "  Project ID: $PROJECT_ID"
          echo "  Project Number: $PROJECT_NUMBER"
          echo "  Service Name: $SERVICE_NAME"
          echo "  Region: $REGION"
          echo "  Resources: $CPU CPU, $MEMORY Memory"
          echo "  Scaling: $MIN_INSTANCES-$MAX_INSTANCES instances"

  deploy:
    needs: load-config
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout application code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: >-
            projects/${{ needs.load-config.outputs.project_number }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: >-
            github-actions-sa@${{ needs.load-config.outputs.project_id }}.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.load-config.outputs.project_id }}

      - name: Configure Docker
        run: gcloud auth configure-docker -q

      - name: Verify application files
        run: |
          echo "üìÅ AcademyAxis application files:"
          ls -la
          echo ""
          
          if [ -f "package.json" ]; then
            echo "üì¶ Found Node.js application"
            echo "Package.json contents:"
            cat package.json | head -20
          fi
          
          if [ -f "server.js" ]; then
            echo "üéì Found AcademyAxis server.js"
            echo "First 10 lines:"
            head -10 server.js
          fi

      - name: Build and Push Docker image
        run: |
          IMAGE_NAME="gcr.io/${{ needs.load-config.outputs.project_id }}/${{ needs.load-config.outputs.service_name }}:${{ github.sha }}"
          
          echo "üèóÔ∏è Building AcademyAxis Docker image: $IMAGE_NAME"
          docker build -t "$IMAGE_NAME" .
          
          echo "üöÄ Pushing AcademyAxis Docker image to registry"
          docker push "$IMAGE_NAME"
          
          echo "‚úÖ AcademyAxis image build and push completed"

      - name: Deploy to Cloud Run
        run: |
          echo "üéì Deploying AcademyAxis ${{ needs.load-config.outputs.service_name }} to Cloud Run"
          
          gcloud run deploy ${{ needs.load-config.outputs.service_name }} \
            --image gcr.io/${{ needs.load-config.outputs.project_id }}/${{ needs.load-config.outputs.service_name }}:${{ github.sha }} \
            --platform managed \
            --region ${{ needs.load-config.outputs.region }} \
            --allow-unauthenticated \
            --memory ${{ needs.load-config.outputs.memory }} \
            --cpu ${{ needs.load-config.outputs.cpu }} \
            --max-instances ${{ needs.load-config.outputs.max_instances }} \
            --min-instances ${{ needs.load-config.outputs.min_instances }} \
            --concurrency 80 \
            --timeout 300s \
            --set-env-vars="ENVIRONMENT=dev,JWT_SECRET=dev-academyaxis-secret-change-in-production" \
            --quiet

      - name: Post-deployment verification
        run: |
          # Get the service URL
          SERVICE_URL=$(gcloud run services describe ${{ needs.load-config.outputs.service_name }} \
            --platform managed \
            --region ${{ needs.load-config.outputs.region }} \
            --format 'value(status.url)')
          
          echo "üåê AcademyAxis service deployed at: $SERVICE_URL"
          
          # Wait a moment for service to be ready
          sleep 15
          
          # Test the service health endpoint
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health" || echo "FAILED")
          
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "‚úÖ AcademyAxis service is responding successfully (HTTP $HTTP_STATUS)"
            echo "üéì Educational platform is live and ready for learning!"
            echo ""
            echo "üìö Available endpoints:"
            echo "  - Main Platform: $SERVICE_URL"
            echo "  - Health Check: $SERVICE_URL/health"
            echo "  - API Info: $SERVICE_URL/api/info"
            echo "  - Courses API: $SERVICE_URL/api/courses"
            echo "  - Auth API: $SERVICE_URL/api/auth/register"
            echo ""
            echo "üöÄ AcademyAxis is ready for student enrollment!"
          else
            echo "‚ö†Ô∏è AcademyAxis service returned HTTP status: $HTTP_STATUS"
            echo "Check the logs for deployment issues"
          fi
          
          echo "üìã AcademyAxis deployment completed for development environment"